import { Context } from "telegraf";
import axios from "axios";
import { BOT_DEFAULTS } from "../constants";
import { ChatMessage, UserContext } from "../types";
import { ApiService } from "../api/apiService";
import { ContextManager } from "../context/contextManager";
import { MessageParser } from "./messageParser";
import { MessageSender } from "./messageSender";
import { BotConfig } from "../types";

export class MessageHandlers {
  private apiService: ApiService;
  private contextManager: ContextManager;
  private messageParser: MessageParser;
  private messageSender: MessageSender;
  private config: BotConfig;
  private botInfo: any;
  private startupTime: number;

  constructor(
    config: BotConfig,
    apiService: ApiService,
    contextManager: ContextManager,
    messageParser: MessageParser,
    messageSender: MessageSender,
    botInfo: any,
    startupTime: number
  ) {
    this.config = config;
    this.apiService = apiService;
    this.contextManager = contextManager;
    this.messageParser = messageParser;
    this.messageSender = messageSender;
    this.botInfo = botInfo;
    this.startupTime = startupTime;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç—É
   */
  public async handleDirectMessage(ctx: Context, text: string): Promise<void> {
    const message = ctx.message;
    if (!message) return;

    try {
      console.log(`[${this.config.BOT_NAME}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, text);

      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
      const userKey = this.createUserKey(ctx);
      const cleanText = this.messageParser.cleanMentionFromText(
        text,
        this.botInfo?.username
      );

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let userContext = this.contextManager.getUserContext(userKey);

      // –ü–æ–º–µ—á–∞–µ–º –±–µ—Å–µ–¥—É –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—É—é
      userContext.activeConversation = true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞
      await this.checkAndUpdateContextWithReplyInfo(message, userContext);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.processUserMessage(ctx, cleanText, userContext, message);
    } catch (error) {
      await this.handleMessageError(ctx, message, error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
   */
  public async commentPost(ctx: Context, postText: string): Promise<void> {
    try {
      const message = ctx.message;
      if (!message) return;

      if (!postText || postText.length < BOT_DEFAULTS.POSTS.MIN_TEXT_LENGTH)
        return;

      console.log(
        `[${this.config.BOT_NAME}] –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞:`,
        postText.substring(0, 50) + (postText.length > 50 ? "..." : "")
      );

      // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
      const postKey = this.createPostKey(ctx);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –ø–æ—Å—Ç–∞
      const postTopic = await this.apiService.inferPostTopic(postText);
      console.log(`[${this.config.BOT_NAME}] –¢–µ–º–∞ –ø–æ—Å—Ç–∞: ${postTopic}`);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
      let postContext = this.contextManager.getPostContext(postKey, postTopic);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
      const truncatedPostText = this.truncateTextIfNeeded(
        postText,
        BOT_DEFAULTS.MESSAGES.MAX_SAFE_LENGTH
      );

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const botComment = await this.apiService.callApiWithRetry([
        { role: "system", content: this.getSystemPrompt() },
        { role: "user", content: this.getPostCommentPrompt(truncatedPostText) },
      ]);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ—Å—Ç–∞
      this.updatePostContext(postContext, truncatedPostText, botComment);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      await this.sendPostComment(ctx, botComment, message.message_id);
    } catch (error) {
      console.error(`[${this.config.BOT_NAME}] Error commenting post:`, error);

      // –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      try {
        await ctx.reply("–ù–µ –º–æ–≥—É –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç ü§î");
      } catch (e) {
        console.error(
          `[${this.config.BOT_NAME}] Failed to send error message:`,
          e
        );
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private createUserKey(ctx: Context): string {
    const userId = ctx.message?.from ? ctx.message.from.id : "unknown";
    const chatId = ctx.chat?.id || "unknown";
    const botId = this.botInfo?.id || "unknown";
    return `${chatId}_${userId}_${botId}`;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
   */
  private createPostKey(ctx: Context): string {
    const chatId = ctx.chat?.id || "unknown";
    const messageId = ctx.message?.message_id || "unknown";
    const botId = this.botInfo?.id || "unknown";
    return `post_${chatId}_${messageId}_${botId}`;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
   */
  private async checkAndUpdateContextWithReplyInfo(
    message: any,
    userContext: UserContext
  ): Promise<void> {
    if ("reply_to_message" in message && message.reply_to_message) {
      const replyMessage = message.reply_to_message;
      const replyText = this.messageParser.getMessageText(replyMessage);

      if (replyText) {
        const isReplyToChannelPost =
          this.messageParser.isChannelPost(replyMessage);
        if (isReplyToChannelPost) {
          userContext.postTopic = await this.apiService.inferPostTopic(
            replyText
          );
        }
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç
   */
  private async processUserMessage(
    ctx: Context,
    text: string,
    userContext: UserContext,
    message: any
  ): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const truncatedText = this.truncateTextIfNeeded(
      text,
      BOT_DEFAULTS.MESSAGES.MAX_SAFE_LENGTH
    );

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    userContext.messages.push({ role: "user", content: truncatedText });
    userContext.lastInteraction = Date.now();
    userContext.messageCount++;

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    this.limitMessageHistory(userContext);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
    const messages = this.prepareMessagesForApi(userContext);

    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await this.messageSender.sendTypingIndicator(ctx);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API
    const botReply = await this.apiService.callApiWithRetry(messages);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    const sanitizedReply = this.sanitizeResponse(botReply);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    userContext.messages.push({ role: "assistant", content: sanitizedReply });
    userContext.messageCount++;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await this.messageSender.sendSplitMessage(
      ctx,
      sanitizedReply,
      message.message_id
    );
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  private async handleMessageError(
    ctx: Context,
    message: any,
    error: any
  ): Promise<void> {
    console.error(
      `[${this.config.BOT_NAME}] Error handling direct message:`,
      error
    );

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if (axios.isAxiosError(error)) {
      if (error.response?.status === 429) {
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏, —è —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
          // @ts-ignore
          { reply_to_message_id: message.message_id }
        );
        return;
      }

      if (error.code === "ECONNABORTED" || error.code === "ETIMEDOUT") {
        await ctx.reply(
          "–ò–∑–≤–∏–Ω–∏, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å.",
          // @ts-ignore
          { reply_to_message_id: message.message_id }
        );
        return;
      }
    }

    // –û–±—â–∏–π –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (ctx.chat) {
      try {
        await ctx.reply(
          "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
          // @ts-ignore
          { reply_to_message_id: message.message_id }
        );
      } catch (replyError) {
        console.error(
          `[${this.config.BOT_NAME}] Error sending error message:`,
          replyError
        );
        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ reply
        try {
          await ctx.reply(
            "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§ñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
          );
        } catch (e) {
          console.error(
            `[${this.config.BOT_NAME}] Could not send any error message:`,
            e
          );
        }
      }
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è API
   */
  private prepareMessagesForApi(userContext: UserContext): ChatMessage[] {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    const needsReminderOfRole =
      userContext.messageCount % BOT_DEFAULTS.MESSAGES.REMINDER_INTERVAL === 0;

    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages: ChatMessage[] = [
      { role: "system", content: this.getSystemPrompt() },
    ];

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–æ–ª–∏
    if (needsReminderOfRole) {
      messages.push({
        role: "system",
        content: "–ü–æ–º–Ω–∏ –æ —Å–≤–æ–µ–π —Ä–æ–ª–∏ –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è.",
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–º—ã –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (userContext.postTopic) {
      messages.push({
        role: "system",
        content: `–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è: ${userContext.postTopic}`,
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, –≤—ã–±–∏—Ä–∞—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ
    const relevantMessages = this.getRelevantMessages(userContext.messages);
    messages.push(...relevantMessages);

    return messages;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É
   */
  private async sendPostComment(
    ctx: Context,
    comment: string,
    replyToMessageId: number
  ): Promise<void> {
    try {
      await this.messageSender.sendSplitMessage(ctx, comment, replyToMessageId);
    } catch (error) {
      console.error(
        `[${this.config.BOT_NAME}] Error sending comment, trying without reply:`,
        error
      );
      // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ reply
      await this.messageSender.sendSplitMessage(ctx, comment);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
   */
  private updatePostContext(
    postContext: UserContext,
    postText: string,
    botComment: string
  ): void {
    postContext.messages.push({ role: "user", content: postText });
    postContext.messages.push({ role: "assistant", content: botComment });
    postContext.messageCount += 2;
    postContext.lastInteraction = Date.now();

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
    this.limitMessageHistory(postContext);
  }

  /**
   * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
   */
  private limitMessageHistory(context: UserContext): void {
    if (context.messages.length > BOT_DEFAULTS.HISTORY.MAX_LENGTH) {
      context.messages = context.messages.slice(
        -BOT_DEFAULTS.HISTORY.MAX_LENGTH
      );
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
   */
  private getRelevantMessages(messages: ChatMessage[]): ChatMessage[] {
    if (messages.length <= BOT_DEFAULTS.HISTORY.RELEVANT_LENGTH) {
      return messages;
    }

    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
    return messages.slice(-BOT_DEFAULTS.HISTORY.RELEVANT_LENGTH);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º
   */
  private sanitizeResponse(response: string): string {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
    if (response.length < 5) {
      return "–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç. –ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å?";
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    if (response.length > BOT_DEFAULTS.MESSAGES.MAX_SAFE_LENGTH) {
      console.warn(
        `[${this.config.BOT_NAME}] Unusually long response (${response.length} chars)`
      );
      return (
        response.substring(0, 4000) +
        "\n\n[–û—Ç–≤–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª–∏–Ω—ã]"
      );
    }

    return response;
  }

  /**
   * –û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
   */
  private truncateTextIfNeeded(text: string, maxLength: number): string {
    if (text.length <= maxLength) {
      return text;
    }
    return text.substring(0, maxLength) + "... [—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã]";
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
   */
  private getSystemPrompt(): string {
    return this.config.SYSTEM_PROMPT;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –ø–æ—Å—Ç—É
   */
  private getPostCommentPrompt(postText: string): string {
    return this.config.POST_COMMENT_PROMPT_TEMPLATE.replace(
      "{postText}",
      postText
    );
  }

  public updateBotInfo(botInfo: any): void {
    this.botInfo = botInfo;
  }
}
